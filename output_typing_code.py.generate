# Typage pour commands
commands = pn.state.cache['db']['commands']
commands['Command'] = commands['Command'].astype(str)
commands['sha1'] = commands['sha1'].astype(str)
commands['Command_short'] = commands['Command_short'].astype(str)
commands['param_id'] = commands['param_id'].astype(str)
commands['Config_Alias'] = commands['Config_Alias'].astype(str)
pn.state.cache['db']['commands'] = commands

# Typage pour tasks
tasks = pn.state.cache['db']['tasks']
pn.state.cache['db']['tasks'] = tasks

# Typage pour runs
runs = pn.state.cache['db']['runs']
runs['log_hash'] = runs['log_hash'].astype(str)
runs['Date_Execution'] = pd.to_datetime(runs['Date_Execution'], errors='coerce')
runs['Bit Error Rate (BER) and Frame Error Rate (FER).BE'] = pd.to_numeric(runs['Bit Error Rate (BER) and Frame Error Rate (FER).BE'], errors='coerce').astype('Int64')
runs['Bit Error Rate (BER) and Frame Error Rate (FER).BER'] = pd.to_numeric(runs['Bit Error Rate (BER) and Frame Error Rate (FER).BER'], errors='coerce')
runs['Bit Error Rate (BER) and Frame Error Rate (FER).FE'] = pd.to_numeric(runs['Bit Error Rate (BER) and Frame Error Rate (FER).FE'], errors='coerce').astype('Int64')
runs['Bit Error Rate (BER) and Frame Error Rate (FER).FER'] = pd.to_numeric(runs['Bit Error Rate (BER) and Frame Error Rate (FER).FER'], errors='coerce')
runs['Bit Error Rate (BER) and Frame Error Rate (FER).FRA'] = pd.to_numeric(runs['Bit Error Rate (BER) and Frame Error Rate (FER).FRA'], errors='coerce').astype('Int64')
runs['Global throughputand elapsed time.SIM_THR(Mb/s)'] = pd.to_numeric(runs['Global throughputand elapsed time.SIM_THR(Mb/s)'], errors='coerce')
runs['Global throughputand elapsed time.elapse_time(ns)'] = pd.to_numeric(runs['Global throughputand elapsed time.elapse_time(ns)'], errors='coerce')
runs['Signal Noise Ratio(SNR).Eb/N0(dB)'] = pd.to_numeric(runs['Signal Noise Ratio(SNR).Eb/N0(dB)'], errors='coerce')
runs['Signal Noise Ratio(SNR).Es/N0(dB)'] = pd.to_numeric(runs['Signal Noise Ratio(SNR).Es/N0(dB)'], errors='coerce')
runs['Signal Noise Ratio(SNR).Sigma'] = pd.to_numeric(runs['Signal Noise Ratio(SNR).Sigma'], errors='coerce')
runs['source.type'] = runs['source.type'].astype(str)
runs['id'] = runs['id'].astype(str)
runs['url'] = runs['url'].astype(str)
runs['status'] = runs['status'].astype(str)
runs['job_id'] = runs['job_id'].astype(str)
runs['job_name'] = runs['job_name'].astype(str)
runs['Signal Noise Ratio(SNR).Event Probability'] = pd.to_numeric(runs['Signal Noise Ratio(SNR).Event Probability'], errors='coerce')
runs['Mutual Information.MI'] = pd.to_numeric(runs['Mutual Information.MI'], errors='coerce')
runs['Mutual Information.MI_max'] = pd.to_numeric(runs['Mutual Information.MI_max'], errors='coerce')
runs['Mutual Information.MI_min'] = pd.to_numeric(runs['Mutual Information.MI_min'], errors='coerce')
runs['Mutual Information.n_trials'] = pd.to_numeric(runs['Mutual Information.n_trials'], errors='coerce')
runs['Signal Noise Ratio(SNR).Received Optical'] = pd.to_numeric(runs['Signal Noise Ratio(SNR).Received Optical'], errors='coerce')
runs['Command_id'] = runs['Command_id'].astype(str)
pn.state.cache['db']['runs'] = runs

# Typage pour git
git = pn.state.cache['db']['git']
git['author'] = git['author'].astype(str)
git['email'] = git['email'].astype(str)
git['date'] = pd.to_datetime(git['date'], errors='coerce')
git['message'] = git['message'].astype(str)
git['insertions'] = pd.to_numeric(git['insertions'], errors='coerce').astype('Int64')
git['deletions'] = pd.to_numeric(git['deletions'], errors='coerce').astype('Int64')
git['files_changed'] = pd.to_numeric(git['files_changed'], errors='coerce').astype('Int64')
pn.state.cache['db']['git'] = git

# Typage pour param
param = pn.state.cache['db']['param']
param['Channel.Add users'] = param['Channel.Add users'].astype(str)
param['Channel.Complex'] = param['Channel.Complex'].astype(str)
param['Channel.Implementation'] = param['Channel.Implementation'].astype(str)
param['Channel.Type'] = param['Channel.Type'].astype(str)
param['Codec.Code rate'] = param['Codec.Code rate'].astype(str)
param['Codec.Codeword size (N_cw)'] = param['Codec.Codeword size (N_cw)'].astype(str)
param['Codec.Frame size (N)'] = param['Codec.Frame size (N)'].astype(str)
param['Codec.Info. bits (K)'] = param['Codec.Info. bits (K)'].astype(str)
param['Codec.Type'] = param['Codec.Type'].astype(str)
param['Decoder.Correction power (T)'] = param['Decoder.Correction power (T)'].astype(str)
param['Decoder.Galois field order (m)'] = param['Decoder.Galois field order (m)'].astype(str)
param['Decoder.Implementation'] = param['Decoder.Implementation'].astype(str)
param['Decoder.Systematic'] = param['Decoder.Systematic'].astype(str)
param['Decoder.Type (D)'] = param['Decoder.Type (D)'].astype(str)
param['Encoder.Systematic'] = param['Encoder.Systematic'].astype(str)
param['Encoder.Type'] = param['Encoder.Type'].astype(str)
param['Modem.Bits per symbol'] = param['Modem.Bits per symbol'].astype(str)
param['Modem.Implementation'] = param['Modem.Implementation'].astype(str)
param['Modem.Sigma square'] = param['Modem.Sigma square'].astype(str)
param['Modem.Type'] = param['Modem.Type'].astype(str)
param['Monitor.Compute mutual info'] = param['Monitor.Compute mutual info'].astype(str)
param['Monitor.Frame error count (e)'] = param['Monitor.Frame error count (e)'].astype(str)
param['Monitor.Lazy reduction'] = param['Monitor.Lazy reduction'].astype(str)
param['Simulation.Bad frames replay'] = param['Simulation.Bad frames replay'].astype(str)
param['Simulation.Bad frames tracking'] = param['Simulation.Bad frames tracking'].astype(str)
param['Simulation.Bit rate'] = param['Simulation.Bit rate'].astype(str)
param['Simulation.Code type (C)'] = param['Simulation.Code type (C)'].astype(str)
param['Simulation.Coded monitoring'] = param['Simulation.Coded monitoring'].astype(str)
param['Simulation.Coset approach (c)'] = param['Simulation.Coset approach (c)'].astype(str)
param['Simulation.Date (UTC)'] = param['Simulation.Date (UTC)'].astype(str)
param['Simulation.Debug mode'] = param['Simulation.Debug mode'].astype(str)
param['Simulation.Git version'] = param['Simulation.Git version'].astype(str)
param['Simulation.Inter frame level'] = param['Simulation.Inter frame level'].astype(str)
param['Simulation.Json export'] = param['Simulation.Json export'].astype(str)
param['Simulation.Multi-threading (t)'] = param['Simulation.Multi-threading (t)'].astype(str)
param['Simulation.Noise range'] = param['Simulation.Noise range'].astype(str)
param['Simulation.Noise type (E)'] = param['Simulation.Noise type (E)'].astype(str)
param['Simulation.Seed'] = param['Simulation.Seed'].astype(str)
param['Simulation.Statistics'] = param['Simulation.Statistics'].astype(str)
param['Simulation.Type'] = param['Simulation.Type'].astype(str)
param['Simulation.Type of bits'] = param['Simulation.Type of bits'].astype(str)
param['Simulation.Type of reals'] = param['Simulation.Type of reals'].astype(str)
param['Source.Implementation'] = param['Source.Implementation'].astype(str)
param['Source.Info. bits (K_info)'] = param['Source.Info. bits (K_info)'].astype(str)
param['Source.Type'] = param['Source.Type'].astype(str)
param['Terminal.Enabled'] = param['Terminal.Enabled'].astype(str)
param['Terminal.Frequency (ms)'] = param['Terminal.Frequency (ms)'].astype(str)
param['Terminal.Show Sigma'] = param['Terminal.Show Sigma'].astype(str)
param['Quantizer.Fixed-point config.'] = param['Quantizer.Fixed-point config.'].astype(str)
param['Quantizer.Implementation'] = param['Quantizer.Implementation'].astype(str)
param['Quantizer.Type'] = param['Quantizer.Type'].astype(str)
param['Simulation.Type of quant. reals'] = param['Simulation.Type of quant. reals'].astype(str)
param['Decoder.H matrix path'] = param['Decoder.H matrix path'].astype(str)
param['Decoder.H matrix reordering'] = param['Decoder.H matrix reordering'].astype(str)
param['Decoder.Num. of iterations (i)'] = param['Decoder.Num. of iterations (i)'].astype(str)
param['Decoder.Stop criterion (syndrome)'] = param['Decoder.Stop criterion (syndrome)'].astype(str)
param['Decoder.Stop criterion depth'] = param['Decoder.Stop criterion depth'].astype(str)
param['Decoder.Weighting factor'] = param['Decoder.Weighting factor'].astype(str)
param['Encoder.G build method'] = param['Encoder.G build method'].astype(str)
param['Encoder.H matrix path'] = param['Encoder.H matrix path'].astype(str)
param['Encoder.H matrix reordering'] = param['Encoder.H matrix reordering'].astype(str)
param['Decoder.Bernouilli probas'] = param['Decoder.Bernouilli probas'].astype(str)
param['CRC.Implementation'] = param['CRC.Implementation'].astype(str)
param['CRC.Polynomial (hexadecimal)'] = param['CRC.Polynomial (hexadecimal)'].astype(str)
param['CRC.Size (in bit)'] = param['CRC.Size (in bit)'].astype(str)
param['CRC.Type'] = param['CRC.Type'].astype(str)
param['Decoder.Adaptative mode'] = param['Decoder.Adaptative mode'].astype(str)
param['Decoder.Max num. of lists (L)'] = param['Decoder.Max num. of lists (L)'].astype(str)
param['Decoder.Polar node types'] = param['Decoder.Polar node types'].astype(str)
param['Decoder.SIMD strategy'] = param['Decoder.SIMD strategy'].astype(str)
param['Frozen bits generator.Noise'] = param['Frozen bits generator.Noise'].astype(str)
param['Frozen bits generator.Type'] = param['Frozen bits generator.Type'].astype(str)
param['Puncturer.Type'] = param['Puncturer.Type'].astype(str)
param['Decoder.Node type'] = param['Decoder.Node type'].astype(str)
param['Frozen bits generator MK.Noise'] = param['Frozen bits generator MK.Noise'].astype(str)
param['Frozen bits generator MK.Type'] = param['Frozen bits generator MK.Type'].astype(str)
param['Polar code.Kernel'] = param['Polar code.Kernel'].astype(str)
param['Decoder.Min type'] = param['Decoder.Min type'].astype(str)
param['Interleaver.Seed'] = param['Interleaver.Seed'].astype(str)
param['Interleaver.Type'] = param['Interleaver.Type'].astype(str)
param['Interleaver.Uniform'] = param['Interleaver.Uniform'].astype(str)
param['Encoder.Buffered'] = param['Encoder.Buffered'].astype(str)
param['Polar code.Kernels'] = param['Polar code.Kernels'].astype(str)
param['Polar code.Stages'] = param['Polar code.Stages'].astype(str)
param['Puncturer.Pattern'] = param['Puncturer.Pattern'].astype(str)
param['Codec.Symbols Codeword size'] = param['Codec.Symbols Codeword size'].astype(str)
param['Codec.Symbols Source size'] = param['Codec.Symbols Source size'].astype(str)
param['Decoder.Max type'] = param['Decoder.Max type'].astype(str)
param['Decoder.Polynomials'] = param['Decoder.Polynomials'].astype(str)
param['Decoder.Standard'] = param['Decoder.Standard'].astype(str)
param['Encoder.Polynomials'] = param['Encoder.Polynomials'].astype(str)
param['Encoder.Standard'] = param['Encoder.Standard'].astype(str)
param['Encoder.Tail length'] = param['Encoder.Tail length'].astype(str)
param['Decoder.Num. of lists (L)'] = param['Decoder.Num. of lists (L)'].astype(str)
param['Decoder.Normalize factor'] = param['Decoder.Normalize factor'].astype(str)
param['Source.Auto reset'] = param['Source.Auto reset'].astype(str)
param['Source.Fifo mode'] = param['Source.Fifo mode'].astype(str)
param['Source.Path'] = param['Source.Path'].astype(str)
param['Flip and check.Enabled'] = param['Flip and check.Enabled'].astype(str)
param['Scaling factor.Enabled'] = param['Scaling factor.Enabled'].astype(str)
param['Scaling factor.SF iterations'] = param['Scaling factor.SF iterations'].astype(str)
param['Scaling factor.Scaling factor (SF)'] = param['Scaling factor.Scaling factor (SF)'].astype(str)
param['Flip and check.FNC ite max'] = param['Flip and check.FNC ite max'].astype(str)
param['Flip and check.FNC ite min'] = param['Flip and check.FNC ite min'].astype(str)
param['Flip and check.FNC ite step'] = param['Flip and check.FNC ite step'].astype(str)
param['Flip and check.FNC q'] = param['Flip and check.FNC q'].astype(str)
param['Modem.Max type'] = param['Modem.Max type'].astype(str)
param['Frozen bits generator.Path'] = param['Frozen bits generator.Path'].astype(str)
param['Modem.Codebook'] = param['Modem.Codebook'].astype(str)
param['Modem.Number of iterations'] = param['Modem.Number of iterations'].astype(str)
param['Modem.Psi function'] = param['Modem.Psi function'].astype(str)
param['Interleaver.Number of columns'] = param['Interleaver.Number of columns'].astype(str)
param['Channel.Block fading policy'] = param['Channel.Block fading policy'].astype(str)
param['Modem.CPM L memory'] = param['Modem.CPM L memory'].astype(str)
param['Modem.CPM h index'] = param['Modem.CPM h index'].astype(str)
param['Modem.CPM mapping'] = param['Modem.CPM mapping'].astype(str)
param['Modem.CPM sampling factor'] = param['Modem.CPM sampling factor'].astype(str)
param['Modem.CPM standard'] = param['Modem.CPM standard'].astype(str)
param['Modem.CPM wave shape'] = param['Modem.CPM wave shape'].astype(str)
param['Decoder.Num. of flips'] = param['Decoder.Num. of flips'].astype(str)
param['Interleaver.Path'] = param['Interleaver.Path'].astype(str)
param['Simulation.Global iterations (I)'] = param['Simulation.Global iterations (I)'].astype(str)
param['Modem.ROP estimation'] = param['Modem.ROP estimation'].astype(str)
param['Simulation.PDF path'] = param['Simulation.PDF path'].astype(str)
pn.state.cache['db']['param'] = param

# Typage pour logs
logs = pn.state.cache['db']['logs']
logs['log'] = logs['log'].astype(str)
logs['hash'] = logs['hash'].astype(str)
logs['filename'] = logs['filename'].astype(str)
logs['Date_Execution'] = logs['Date_Execution'].astype(str)
pn.state.cache['db']['logs'] = logs

